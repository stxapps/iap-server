import appstore from './appstore';
import playstore from './playstore';
import dataApi from './data';
import { APPSTORE, PLAYSTORE, VALID } from './const';
import { randomString } from './utils';

const _reverify = async (logKey, purchase) => {
  const { source, productId, token } = purchase;

  if (source === APPSTORE) {
    if (!token) {
      console.log(`(${logKey}) Found no token for purchase: ${purchase}`);
      return;
    }

    const verifyResult = await appstore.verifySubscription(
      logKey, null, productId, token,
    );

    const { status, latestReceipt, verifyData } = verifyResult;
    if (status !== VALID) {
      console.log(`(${logKey}) Found invalid status: ${status} for purchase: ${purchase}`);
      return;
    }

    const parsedData = dataApi.parseData(logKey, APPSTORE, verifyData);
    await dataApi.updatePurchase(
      logKey, APPSTORE, productId, latestReceipt, parsedData,
    );
    console.log(`(${logKey}) Saved to Datastore`);
  } else if (source === PLAYSTORE) {
    const verifyResult = await playstore.verifySubscription(
      logKey, null, productId, token,
    );

    const { status, verifyData } = verifyResult;
    if (status !== VALID) {
      console.log(`(${logKey}) Found invalid status: ${status} for purchase: ${purchase}`);
      return;
    }

    const parsedData = dataApi.parseData(logKey, PLAYSTORE, verifyData);
    if (verifyData.linkedPurchaseToken) {
      await dataApi.invalidatePurchase(
        logKey, PLAYSTORE, productId, token, verifyData.linkedPurchaseToken, parsedData,
      );
      console.log(`(${logKey}) Called invalidatePurchase instead of updatePurchase`);
    } else {
      await dataApi.updatePurchase(
        logKey, PLAYSTORE, productId, token, parsedData,
      );
    }
    console.log(`(${logKey}) Saved to Datastore`);
  } else {
    console.log(`(${logKey}) Found invalid source: ${source}`);
  }
};

const reverify = async () => {
  const logKey = randomString(12);
  console.log(`(${logKey}) reverify starts`);

  // Get obsolete purchase from report.js!
  // If too many, read from local purchase.json generated by report.js!
  const source = 'PlayStore';
  const token = 'gmecdikhginncgemphbkcdgf.AO-J1Ox2jZUqcu0jP240paxUSgbXOKKKWpX-eiAItI6NwqpJOZB8czs30YNKpOhpPj39gNZ22LOacppe_i-aEItoZV0hgQyUWg';
  const originalOrderId = null;
  const purchase = await dataApi.getPurchase(logKey, source, token, originalOrderId);

  await _reverify(logKey, purchase);
};

reverify();
